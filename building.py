
# ------------------------------------------------------------------
# string = "{a} + {b} = {c}"
# print(string)
# a, b = 45, 54
# print(string.format(a=a, b=b, c=a+b))
# ------------------------------------------------------------------
# test = True
# result = 'Test is True' if test else 'Test is False'
# ------------------------------------------------------------------
# class lol:
#     def func(self, abc):
#         print(abc, abc)
#     def func(self, qwe):
#         print(qwe)
#
# lol().func(qwe=1)
# lol().func(abc=2)

# ------------------------------------------------------------------
# abc = 2314
# abc as lol
# print(lol)

# ------------------------------------------------------------------

# class lol:
#     def __init__(self):
#         print(type(self).__name__)
#
# lol()


# ------------------------------------------------------------------
# class task:
#     def __init__(self, data_dict: dict):
#         [setattr(self, name, data_dict[name]) for name in data_dict.keys()]
#
#
# t = task({"a": 1})
# # t = task(1)
# print(t.a)



# ------------------------------------------------------------------
# class lol:
#     def l(self):
#         if not self.a:
#             print("111")
# lol().l()
# ------------------------------------------------------------------

# text = (
#     "123"
#     f"r443"
# )
# print(text)

# ------------------------------------------------------------------

# type = None
# ""

# ------------------------------------------------------------------
# type = 1
# texts = ["123", "234", "45"]
#
# if type:
#     texts[type] = f"! {texts[type]}"
# print(texts)

# # ------------------------------------------------------------------
# def lol(**kwargs):
#     print("ok", kwargs)
#
# d = {key: value for (key, value) in [(1, 1), (2, 3)]}
# lol(d)

# ------------------------------------------------------------------
#
# number = -1
# if 0 <= number < 10:
#     print(number)


# ------------------------------------------------------------------

# # koef = [1.3, 5.9, 10.5]
# min2, min3 = 1, 0
# sum = 150
#
# string = "1.28	5.90	11.5"
# koef = [float(x) for x in string.split()]
#
# koef.sort()
# k1, k2, k3 = koef[0], koef[1], koef[2]
#
# k_buk = 1 / (1/k1 + 1/k2 + 1/k3)
# A1, A2, A3 = (100 * k_buk) / k1, (100 * k_buk) / k2, (100 * k_buk) / k3
# print(A1, A2, A3, A1+A2+A3)
#
# # s2 = sum // koef[1]
# # print(f"{koef[0]}  {sum-s2}\n{koef[1]}  {s2}\n")
#
# s2 = sum * min2 / k2
# s3 = sum * min3 / k3
# s1 = sum - s2 - s3
# min1 = (sum + s1 * k1 - sum) / sum
# print(s1 * k1 - sum)
# print("\n", s1, s2, s3, "\n")
# profit = A1 * (min1 - 1) + A2 * (min2 - 1) + A3 * (min3 - 1)
# print(profit)


# ------------------------------------------------------------------
# abcbcbcb =  6

# ------------------------------------------------------------------

s = "блсмтолт"
print(s[0].isalpha())
print(s[0].upper())
vowels = "а, о, и, е, ё, э, ы, у, ю, я".replace(",", "")
print(vowels)


word_types = {}
word_types["Имя существительное"] = """
 аэропОрты, неподвижн. ударение на 4-ом слоге
 бАнты, неподвижн. ударение на 1-ом слоге
 бОроду, вин.п.,только в этой форме ед.ч., ударение на 1-ом слоге
 бухгАлтеров, род.п.мн.ч., неподвижное, ударение на 2-ом слоге
 вероисповЕдание, от веру исповЕдать
 граждАнство
 дефИс, из нем.яз., где ударение на 2-ом слоге
 диспансЕр, слово пришло из англ. яз. Через посредство франц.яз., где  удар. всегда на последнем слоге
 договорЁнность
 докумЕнт
 досУг
 еретИк
 жалюзИ, из франц. яз., где удар. всегда на последнем слоге
 знАчимость, от прил. знАчимый
 Иксы, им.п. мн.ч., неподвижн. ударение
 каталОг, в одном ряду со словами диалОг,
 монолОг, некролОг т.п.
 квартАл, из нем. яз., где ударение на 2-ом слоге
 киломЕтр, в одном ряду со словами: сантимЕтр, децимЕтр, миллимЕтр…
 кОнусы, кОнусов, неподвиж. Ударение на 1-м слоге во всех падежах в  ед. и мн. ч.
 корЫсть
 крАны, неподвижн. ударение на 1-ом слоге
 кремЕнь, кремнЯ, удар. во всех формах на последнем слоге, как и в  слове огОнь
 лЕкторы, лЕкторов, см. слово бант(ы)
 лыжнЯ
 мЕстностей, род.п. мн.ч., в одном ряду со словоформой пОчестей,  чЕлюстей…, но новостЕй
 мусоропровОд, в одном ряду со словами газопровОд, нефтепровОд, водопровОд
 намЕрение	
 нарОст
 нЕдруг
 недУг
 некролОг, см. каталОг
 нЕнависть
 нОвости, новостЕй, но: см. мЕстностей
 нОготь, нОгтя, неподвижн. ударение во всех формах ед.ч.
 Отрочество, от Отрок- подросток
 партЕр, из франц. яз., где удар. всегда на последнем слоге
 портфЕль
 пОручни
 придАное
 призЫв, в одном ряду со словами позЫв,
 отзЫв (посла), созЫв, но: Отзыв (на публикацию)
 свЁкла
 сирОты, им.п.мн.ч., ударение во всех формах мн.ч. только на 2-ом  слоге
 срЕдства, им.п.мн.ч.
 созЫв, см. призЫв
 стАтуя
 столЯр, в одном ряду со словами малЯр, доЯр, школЯр…
 тамОжня
 тОрты, тОртов
 цемЕнт
 цЕнтнер
 цепОчка
 шАрфы, см. бАнты
 шофЁр, в одном ряду со словами: киоскЁр, контролЁр…
 экспЕрт, из франц. яз., где ударение всегда на последнем слоге             
""".split("\n")
word_types["Имя прилагательное"] = """
 вернА, краткое прилаг. ж.р. знАчимый
 красИвее, прил.и нареч. в сравн.ст. 
 красИвейший, превосх.ст.
 кУхонный
 ловкА, краткое прилаг. ж.р.	 мозаИчный
 оптОвый
 прозорлИва, краткое прилаг. ж.р., в одном
 ряду со словами смазлИва, суетлИва,
 болтлИва..., но: прожОрлива
 слИвовый, образовано от слИва
""".split("\n")
word_types["Глагол"] = """
 баловАть, в одном ряду со словами баловАться, избаловАть,  разбаловАть…, но: бАловень судьбы брать-бралА
 брАться-бралАсь
 взять-взялА
 взЯться-взялАсь
 включИть-включИшь,
 включИт, включИм
 влИться-влилАсь
 ворвАться-ворвалАсь
 воспринЯть-воспринялА
 воссоздАть-воссоздалА
 вручИть-вручИт
 гнАть-гналА
 гнАться-гналАсь
 добрАть-добралА
 добрАться-добралАсь
 дождАться-дождалАсь
 дозвонИться-дозвонИтся,
 дозвонЯтся
 дозИровать
 ждать-ждалА
 жИться-жилОсь
 закУпорить
 занЯть-зАнял, занялА,
 зАняло, зАняли
 заперЕть-заперлА
 заперЕться-заперлАсь (на ключ, на замок и т.п.)
 звать-звалА, звонИть, звонИшь, звонИт, звонИм
 исчЕрпать
 клАсть-клАла
 клЕить
 крАсться — крАлась
 лгать-лгалА
 лить-лилА
 лИться-лилАсь
 наврАть-навралА
 наделИть-наделИт
 надорвАться-надорвалАсь
 назвАться-назвалАсь
 накренИться-накренИтся
 налИть-налилА
 нарвАть-нарвалА
 насорИть-насорИт
 начАть-нАчал, началА, нАчали
 обзвонИть-обзвонИт	 облегчИть-облегчИт
 облИться-облилАсь
 обнЯться-обнялАсь
 обогнАть-обогналА
 ободрАть-ободралА
 ободрИть
 ободрИться-ободрИшься
 обострИть
 одолжИть-одолжИт
 озлОбить
 оклЕить
 окружИть-окружИт
 опломбировАть, в одном ряду со словамиформировАть,  нормировАть, сортировАть, премировАть…
 опОшлить
 освЕдомиться-освЕдомишься
 отбЫть-отбылА
 отдАть-отдалА
 откУпорить-откУпорил
 отозвАть-отозвалА
 отозвАться-отозвалАсь
 перезвонИть — перезвонИт
 перелИть-перелилА
 плодоносИть
 повторИть-повторИт
 позвАть-позвалА
 позвонИть-позвонИшь-позвонИт
 полИть-полилА
 положИть-положИл
 понЯть-понялА
 послАть-послАла
 прибЫть-прИбыл-прибылА-прИбыло
 принЯть-прИнял-прИняли-принялА
 принУдить
 рвАть-рвалА
 сверлИть-сверлИшь-сверлИт
 снЯть-снялА
 создАть-создалА
 сорвАть-сорвалА
 сорИть-сорИт
 убрАть-убралА
 убыстрИть
 углубИть
 укрепИть-укрепИт
 чЕрпать
 щемИть-щемИт
 щЁлкать
""".split("\n")

for type in list(word_types.keys()):
    print(len(word_types[type]))
    print(word_types[type])

n = sum([len(word_types[type]) for type in list(word_types.keys())])
print(n)

string = "abcdefghklmn"; num = 4
string = string[0:num] + string[num].upper() + string[num+1:]
print(string)

abc = { "b": 2, "a": 1}
print(abc)


# ------------------------------------------------------------------